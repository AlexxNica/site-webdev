---
layout: angular
title: Routing Basics
description: Getting started with the router
sideNavGroup: advanced
prevpage:
  title: Routing Overview
  url: /angular/guide/router/index
nextpage:
  title: Default, Redirect and Wildcard Routes
  url: /angular/guide/router/2
---
//- FilePath: src/angular/guide/router/1.jade
include ../../_util-fns
- var _example = 'router';
include _milestone-nav
script $('#router-milestone').val('1')

//- .l-main-section
//-   ## Milestone 1: Routing basics
:marked
  Create a new project named `router_example`, and populate it using
  Simple Angular Example template, as described in
  [Setup for Development](/angular/guide/setup).
  For this first milestone, you'll create a rudimentary
  version of the app that navigates between two (placeholder) views.

figure.image-display
  img(src='/resources/images/devguide/router/router-1-anim.gif' alt="App in action" width="250")

//- TODO: update the discussion of base-href; see toh. E.g., cover meaningful values when used via WebStorm or when deployed
//- The auto toc generator can't handle *&lt;base href>*
a#base-href
:marked
  ## Set the *base href*

  The router uses the browser's
  [history.pushState](https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries)
  for navigation. Thanks to `pushState`, you can make in-app URL paths look the way you want them to
  look, e.g. `localhost:3000/crisis-center`. The in-app URLs can be indistinguishable from server URLs.

  Modern HTML 5 browsers were the first to support `pushState` which is why many people refer to these URLs as
  "HTML 5 style" URLs.

.l-sub-section
  :marked
    HTML 5 style navigation is the router default.
    In the [Browser URL Styles](appendices#browser-url-styles) Appendix, 
    learn why HTML 5 style is preferred, how to adjust its behavior, and how to switch to the
    older hash (#) style, if necessary.

:marked
  You must add a [&lt;base href> element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base)
  to the app's `index.html` for `pushState` routing to work.
  The browser uses the base `href` value to prefix *relative* URLs when referencing
  CSS files, scripts, and images.

  Add the base element just after the  `<head>` tag as shown here.

+makeExcerpt('index.html', 'base-href')

//- .callout.is-important
  header Live example note
  :marked
    A live coding environment like Plunker sets the application base address dynamically so you can't specify a fixed address.
    That's why the example code replaces the `<base href...>` with a script that writes the `<base>` tag on the fly.

  code-example(language="html").
    &lt;script>document.write('&lt;base href="' + document.location + '" />');&lt;/script>

  :marked
    You should only need this trick for the live example, not production code.

a#import
:marked
  ## Configure the routes for the Router

  Begin by importing the router library.

+makeExcerpt('app/app.component.1.ts (import)')

:marked
  The router is not part of the Angular core, it is in its own library.
  The router is an optional service because not all applications
  need routing and, depending on your requirements, you may need a different routing library.

  You teach the router how to navigate by configuring it with routes.

a#route-config
:marked
  ## @RouteConfig

  A router must be configured with a list of route definitions.
  A router also needs a *host component*, a point of origin for its navigations.

  The `@RouteConfig` annotation combines the creation of a new router, its configuration, and
  its assignment to a host component in a single step.

+makeExcerpt('app/app.component.1.ts', 'routes', '')

:marked
  The `@RouteConfig()` is applied to `AppComponent` which makes it the router's host component.
  The argument to `@RouteConfig()` is a list of *route definitions*.

  Each definition is a [Route](/angular/api/angular2.router/Route-class.html) which has a

  * `path`: the URL path segment for this route
  * `name`: the name of the route, which *must* be spelled in
     [PascalCase](../glossary.html#pascalcase)
     to avoid possible confusion with the route `path`
  * `component`: the component associated with this route

  The router draws upon its registry of definitions when the browser URL changes
  or when application code tells the router to navigate along a route path.

  In simpler terms, you might say this of the first route:

  - When the browser's location URL changes to match the path segment `/crisis-center`, then
  the router activates an instance of the `CrisisCenterComponent` and displays its view.

  - When the application requests navigation to the route named `CrisisCenter`, then the router
  activates an instance of `CrisisCenterComponent`, displays its view, and updates the
  browser's address location and history with the URL for that path.

//- TODO: ensure that `ROUTER_PROVIDERS` are described somewhere. Toh-5 provides it via the app.comp.

a#shell
:marked
  ## The *AppComponent* shell

  `AppComponent` is the application shell. It has a title, a navigation bar with two links,
  and a *router outlet* where the router swaps views on and off the page. Here's what you get:

figure.image-display
  img(src='/resources/images/devguide/router/shell-and-outlet.png' alt="Shell" width="300" )

a#shell-template
:marked
  The corresponding component template looks like this:

+makeExcerpt('app/app.component.1.ts', 'template', '')

a#router-outlet
:marked
  ## *RouterOutlet*

  The `RouterOutlet` is a directive from the router library that marks
  the spot in the template where the router should display the views for that outlet.

.l-sub-section
  :marked
    The `<router-outlet>` element is rendered in the DOM.
    The router inserts the outlet's view elements as siblings
    immediately _after_ the `<router-outlet>`.

a#router-link
:marked
  ## *RouterLink* binding

  Above the outlet, within the anchor tags, you see
  [property bindings](../template-syntax.html#property-binding) to
  `RouterLink` directives that look like `[routerLink]="[...]"`.
  The template expression to the right of the equals is a
  **[link parameters list](appendices#link-parameters-list)**, and it 
  holds the ingredients to router navigation:

  * the name of the route that prescribes the destination component and a path for the URL
  * optional route and query parameters that go into the route URL

  The lists shown in the example above, each have a single parameter, a route name.
  You'll see the use of route parameters later.

//- TODO: once we've moved to the new router (supporting RouterLinkActive), make this its own section
//- and consider adding more material (cf. corresponding TS docs).
  ## *RouterLinkActive* binding

:marked
  The `RouterLink` directive adds the `router-link-active` CSS class to active router link.
  This cascades down through each level of the route tree, so parent and child router links 
  can be active at the same time.

:marked
  ## *Declaring router providers and directives*

  To use the router, you must add its services to your application. One
  way to achieve this is by adding `ROUTER_PROVIDERS` to your shell
  component's `providers` list.
  
  To use router directives like `RouterLink` and `RouterOutlet` within a
  component, you must add them to the component's `directives` list.

  Here is the current state of `app_component.dart` which illustrates both of these additions:

+makeExcerpt('app/app.component.1.ts')

#wrap-up
:marked
  ## Application code

  You've got a very basic, navigating app, one that can switch between two views
  when the user clicks a link.
  The starter app's structure looks like this:

.filetree
  .file router_example
  .children
    .file lib
    .children
      .file app_component.dart
      .file crisis_center_component.dart
      .file heroes.component.dart
      .file not_found_component.dart
    .file web
    .children
      .file index.html
      .file main.dart
      .file styles.css

:marked
  Here are the files discussed in this milestone

+makeTabs(
  `router/dart/lib/app_component_1.dart,
  router/dart/lib/crisis_center_component_1.dart,
  router/dart/lib/heroes_component_1.dart,
  router/dart/web/index.html,
  router/dart/web/main_1.dart`,
  '',
  `lib/app_component.dart,
  lib/crisis_center_component.dart,
  lib/heroes_component.dart,
  web/index.html,
  web/main.dart`)
